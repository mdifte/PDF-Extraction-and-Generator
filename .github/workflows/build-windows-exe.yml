name: Build Windows Executable

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if (Test-Path requirements.txt) { pip install -r requirements.txt }

    - name: Validate build requirements
      run: |
        python validate_build.py

    - name: Build Windows executable
      run: |
        .\build_windows.bat
      shell: cmd

    - name: Verify build output
      run: |
        Get-ChildItem dist/
        if (Test-Path "dist/PDF_Processor.exe") {
          Write-Host "✅ Build successful!"
          Get-Item dist/PDF_Processor.exe | Select-Object Name, Length, LastWriteTime
        } else {
          Write-Host "❌ Build failed - executable not found"
          exit 1
        }

    - name: Test Windows executable
      run: |
        Write-Host "🧪 Testing Windows executable..."
        
        $exePath = "dist/PDF_Processor.exe"
        
        # Check if executable exists
        if (!(Test-Path $exePath)) {
          Write-Host "❌ Executable not found: $exePath"
          exit 1
        }
        
        # Get file information
        Write-Host "📋 Executable Information:"
        Get-Item $exePath | Select-Object Name, Length, LastWriteTime, VersionInfo
        
        # Test if executable is valid (try to get version info)
        Write-Host "Testing executable validity..."
        try {
          $versionInfo = (Get-Item $exePath).VersionInfo
          if ($versionInfo.FileVersion) {
            Write-Host "✅ Executable has version info: $($versionInfo.FileVersion)"
          } else {
            Write-Host "ℹ️  No version info found (normal for PyInstaller executables)"
          }
        } catch {
          Write-Host "⚠️  Could not get version info: $($_.Exception.Message)"
        }
        
        # Test if executable can start (with timeout)
        Write-Host "Testing executable startup..."
        try {
          $process = Start-Process -FilePath $exePath -ArgumentList "--help" -NoNewWindow -PassThru -Wait -Timeout 10
          if ($process.ExitCode -eq 0) {
            Write-Host "✅ Executable started and exited cleanly"
          } elseif ($process.ExitCode -eq 1) {
            Write-Host "ℹ️  Executable started but exited with code 1 (may be normal for GUI apps)"
          } else {
            Write-Host "⚠️  Executable exited with code: $($process.ExitCode)"
          }
        } catch {
          if ($_.Exception.Message -like "*timeout*") {
            Write-Host "✅ Executable started successfully (timed out as expected for GUI app)"
          } else {
            Write-Host "⚠️  Executable test failed: $($_.Exception.Message)"
          }
        }
        
        Write-Host "✅ Windows executable test completed!"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: PDF-Processor-Windows
        path: |
          dist/PDF_Processor.exe
          build_windows.bat
          BUILD_README.md
        retention-days: 30

    - name: Create release archive
      run: |
        Compress-Archive -Path dist/PDF_Processor.exe -DestinationPath dist/PDF_Processor_Windows.zip

    - name: Upload release archive
      uses: actions/upload-artifact@v4
      with:
        name: PDF-Processor-Windows-Archive
        path: dist/PDF_Processor_Windows.zip
        retention-days: 30

    - name: Generate build summary
      run: |
        echo "## 📦 Build Summary" >> $env:GITHUB_STEP_SUMMARY
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "**Platform:** Windows $(Get-ComputerInfo | Select-Object -ExpandProperty WindowsProductName)" >> $env:GITHUB_STEP_SUMMARY
        echo "**Python:** $(python --version)" >> $env:GITHUB_STEP_SUMMARY
        echo "**PyInstaller:** $(pyinstaller --version)" >> $env:GITHUB_STEP_SUMMARY
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "**Build Status:** ✅ Successful" >> $env:GITHUB_STEP_SUMMARY
        echo "**Output File:** dist/PDF_Processor.exe" >> $env:GITHUB_STEP_SUMMARY
        echo "**File Size:** $((Get-Item dist/PDF_Processor.exe).Length / 1MB) MB" >> $env:GITHUB_STEP_SUMMARY
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "### 📁 Included Assets:" >> $env:GITHUB_STEP_SUMMARY
        echo "- Fonts: $(Get-ChildItem fonts/ | Measure-Object | Select-Object -ExpandProperty Count) files" >> $env:GITHUB_STEP_SUMMARY
        echo "- Images: $(Get-ChildItem images/ | Measure-Object | Select-Object -ExpandProperty Count) files" >> $env:GITHUB_STEP_SUMMARY
        echo "- Documents: $(Get-ChildItem docs/ | Measure-Object | Select-Object -ExpandProperty Count) files" >> $env:GITHUB_STEP_SUMMARY
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "### 🚀 Usage:" >> $env:GITHUB_STEP_SUMMARY
        echo "Download the artifact and run:" >> $env:GITHUB_STEP_SUMMARY
        echo '```cmd' >> $env:GITHUB_STEP_SUMMARY
        echo "PDF_Processor.exe" >> $env:GITHUB_STEP_SUMMARY
        echo '```' >> $env:GITHUB_STEP_SUMMARY
